package com.dbtw.models.standard;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicefeesExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public ServicefeesExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected ServicefeesExample(ServicefeesExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table servicefees
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andFeeIsNull() {
            addCriterion("fee is null");
            return this;
        }

        public Criteria andFeeIsNotNull() {
            addCriterion("fee is not null");
            return this;
        }

        public Criteria andFeeEqualTo(Double value) {
            addCriterion("fee =", value, "fee");
            return this;
        }

        public Criteria andFeeNotEqualTo(Double value) {
            addCriterion("fee <>", value, "fee");
            return this;
        }

        public Criteria andFeeGreaterThan(Double value) {
            addCriterion("fee >", value, "fee");
            return this;
        }

        public Criteria andFeeGreaterThanOrEqualTo(Double value) {
            addCriterion("fee >=", value, "fee");
            return this;
        }

        public Criteria andFeeLessThan(Double value) {
            addCriterion("fee <", value, "fee");
            return this;
        }

        public Criteria andFeeLessThanOrEqualTo(Double value) {
            addCriterion("fee <=", value, "fee");
            return this;
        }

        public Criteria andFeeIn(List<Double> values) {
            addCriterion("fee in", values, "fee");
            return this;
        }

        public Criteria andFeeNotIn(List<Double> values) {
            addCriterion("fee not in", values, "fee");
            return this;
        }

        public Criteria andFeeBetween(Double value1, Double value2) {
            addCriterion("fee between", value1, value2, "fee");
            return this;
        }

        public Criteria andFeeNotBetween(Double value1, Double value2) {
            addCriterion("fee not between", value1, value2, "fee");
            return this;
        }

        public Criteria andServicefeetypesIdIsNull() {
            addCriterion("ServiceFeeTypes_id is null");
            return this;
        }

        public Criteria andServicefeetypesIdIsNotNull() {
            addCriterion("ServiceFeeTypes_id is not null");
            return this;
        }

        public Criteria andServicefeetypesIdEqualTo(Integer value) {
            addCriterion("ServiceFeeTypes_id =", value, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdNotEqualTo(Integer value) {
            addCriterion("ServiceFeeTypes_id <>", value, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdGreaterThan(Integer value) {
            addCriterion("ServiceFeeTypes_id >", value, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ServiceFeeTypes_id >=", value, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdLessThan(Integer value) {
            addCriterion("ServiceFeeTypes_id <", value, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdLessThanOrEqualTo(Integer value) {
            addCriterion("ServiceFeeTypes_id <=", value, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdIn(List<Integer> values) {
            addCriterion("ServiceFeeTypes_id in", values, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdNotIn(List<Integer> values) {
            addCriterion("ServiceFeeTypes_id not in", values, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdBetween(Integer value1, Integer value2) {
            addCriterion("ServiceFeeTypes_id between", value1, value2, "servicefeetypesId");
            return this;
        }

        public Criteria andServicefeetypesIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ServiceFeeTypes_id not between", value1, value2, "servicefeetypesId");
            return this;
        }

        public Criteria andCommercialairIdIsNull() {
            addCriterion("CommercialAir_id is null");
            return this;
        }

        public Criteria andCommercialairIdIsNotNull() {
            addCriterion("CommercialAir_id is not null");
            return this;
        }

        public Criteria andCommercialairIdEqualTo(Integer value) {
            addCriterion("CommercialAir_id =", value, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdNotEqualTo(Integer value) {
            addCriterion("CommercialAir_id <>", value, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdGreaterThan(Integer value) {
            addCriterion("CommercialAir_id >", value, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("CommercialAir_id >=", value, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdLessThan(Integer value) {
            addCriterion("CommercialAir_id <", value, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdLessThanOrEqualTo(Integer value) {
            addCriterion("CommercialAir_id <=", value, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdIn(List<Integer> values) {
            addCriterion("CommercialAir_id in", values, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdNotIn(List<Integer> values) {
            addCriterion("CommercialAir_id not in", values, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdBetween(Integer value1, Integer value2) {
            addCriterion("CommercialAir_id between", value1, value2, "commercialairId");
            return this;
        }

        public Criteria andCommercialairIdNotBetween(Integer value1, Integer value2) {
            addCriterion("CommercialAir_id not between", value1, value2, "commercialairId");
            return this;
        }
    }
}