package com.dbtw.models.standard;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class WorkperformedExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public WorkperformedExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected WorkperformedExample(WorkperformedExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table workperformed
     *
     * @ibatorgenerated Thu May 27 15:19:22 MDT 2010
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andAssignmentIdIsNull() {
            addCriterion("assignment_id is null");
            return this;
        }

        public Criteria andAssignmentIdIsNotNull() {
            addCriterion("assignment_id is not null");
            return this;
        }

        public Criteria andAssignmentIdEqualTo(Integer value) {
            addCriterion("assignment_id =", value, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdNotEqualTo(Integer value) {
            addCriterion("assignment_id <>", value, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdGreaterThan(Integer value) {
            addCriterion("assignment_id >", value, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("assignment_id >=", value, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdLessThan(Integer value) {
            addCriterion("assignment_id <", value, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdLessThanOrEqualTo(Integer value) {
            addCriterion("assignment_id <=", value, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdIn(List<Integer> values) {
            addCriterion("assignment_id in", values, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdNotIn(List<Integer> values) {
            addCriterion("assignment_id not in", values, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdBetween(Integer value1, Integer value2) {
            addCriterion("assignment_id between", value1, value2, "assignmentId");
            return this;
        }

        public Criteria andAssignmentIdNotBetween(Integer value1, Integer value2) {
            addCriterion("assignment_id not between", value1, value2, "assignmentId");
            return this;
        }

        public Criteria andStartedIsNull() {
            addCriterion("started is null");
            return this;
        }

        public Criteria andStartedIsNotNull() {
            addCriterion("started is not null");
            return this;
        }

        public Criteria andStartedEqualTo(Date value) {
            addCriterionForJDBCDate("started =", value, "started");
            return this;
        }

        public Criteria andStartedNotEqualTo(Date value) {
            addCriterionForJDBCDate("started <>", value, "started");
            return this;
        }

        public Criteria andStartedGreaterThan(Date value) {
            addCriterionForJDBCDate("started >", value, "started");
            return this;
        }

        public Criteria andStartedGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("started >=", value, "started");
            return this;
        }

        public Criteria andStartedLessThan(Date value) {
            addCriterionForJDBCDate("started <", value, "started");
            return this;
        }

        public Criteria andStartedLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("started <=", value, "started");
            return this;
        }

        public Criteria andStartedIn(List<Date> values) {
            addCriterionForJDBCDate("started in", values, "started");
            return this;
        }

        public Criteria andStartedNotIn(List<Date> values) {
            addCriterionForJDBCDate("started not in", values, "started");
            return this;
        }

        public Criteria andStartedBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("started between", value1, value2, "started");
            return this;
        }

        public Criteria andStartedNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("started not between", value1, value2, "started");
            return this;
        }

        public Criteria andStoppedIsNull() {
            addCriterion("stopped is null");
            return this;
        }

        public Criteria andStoppedIsNotNull() {
            addCriterion("stopped is not null");
            return this;
        }

        public Criteria andStoppedEqualTo(Date value) {
            addCriterionForJDBCDate("stopped =", value, "stopped");
            return this;
        }

        public Criteria andStoppedNotEqualTo(Date value) {
            addCriterionForJDBCDate("stopped <>", value, "stopped");
            return this;
        }

        public Criteria andStoppedGreaterThan(Date value) {
            addCriterionForJDBCDate("stopped >", value, "stopped");
            return this;
        }

        public Criteria andStoppedGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("stopped >=", value, "stopped");
            return this;
        }

        public Criteria andStoppedLessThan(Date value) {
            addCriterionForJDBCDate("stopped <", value, "stopped");
            return this;
        }

        public Criteria andStoppedLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("stopped <=", value, "stopped");
            return this;
        }

        public Criteria andStoppedIn(List<Date> values) {
            addCriterionForJDBCDate("stopped in", values, "stopped");
            return this;
        }

        public Criteria andStoppedNotIn(List<Date> values) {
            addCriterionForJDBCDate("stopped not in", values, "stopped");
            return this;
        }

        public Criteria andStoppedBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("stopped between", value1, value2, "stopped");
            return this;
        }

        public Criteria andStoppedNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("stopped not between", value1, value2, "stopped");
            return this;
        }

        public Criteria andAssignmentsIdIsNull() {
            addCriterion("Assignments_id is null");
            return this;
        }

        public Criteria andAssignmentsIdIsNotNull() {
            addCriterion("Assignments_id is not null");
            return this;
        }

        public Criteria andAssignmentsIdEqualTo(Integer value) {
            addCriterion("Assignments_id =", value, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdNotEqualTo(Integer value) {
            addCriterion("Assignments_id <>", value, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdGreaterThan(Integer value) {
            addCriterion("Assignments_id >", value, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("Assignments_id >=", value, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdLessThan(Integer value) {
            addCriterion("Assignments_id <", value, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdLessThanOrEqualTo(Integer value) {
            addCriterion("Assignments_id <=", value, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdIn(List<Integer> values) {
            addCriterion("Assignments_id in", values, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdNotIn(List<Integer> values) {
            addCriterion("Assignments_id not in", values, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdBetween(Integer value1, Integer value2) {
            addCriterion("Assignments_id between", value1, value2, "assignmentsId");
            return this;
        }

        public Criteria andAssignmentsIdNotBetween(Integer value1, Integer value2) {
            addCriterion("Assignments_id not between", value1, value2, "assignmentsId");
            return this;
        }

        public Criteria andWorktypesIdIsNull() {
            addCriterion("WorkTypes_id is null");
            return this;
        }

        public Criteria andWorktypesIdIsNotNull() {
            addCriterion("WorkTypes_id is not null");
            return this;
        }

        public Criteria andWorktypesIdEqualTo(Integer value) {
            addCriterion("WorkTypes_id =", value, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdNotEqualTo(Integer value) {
            addCriterion("WorkTypes_id <>", value, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdGreaterThan(Integer value) {
            addCriterion("WorkTypes_id >", value, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("WorkTypes_id >=", value, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdLessThan(Integer value) {
            addCriterion("WorkTypes_id <", value, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdLessThanOrEqualTo(Integer value) {
            addCriterion("WorkTypes_id <=", value, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdIn(List<Integer> values) {
            addCriterion("WorkTypes_id in", values, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdNotIn(List<Integer> values) {
            addCriterion("WorkTypes_id not in", values, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdBetween(Integer value1, Integer value2) {
            addCriterion("WorkTypes_id between", value1, value2, "worktypesId");
            return this;
        }

        public Criteria andWorktypesIdNotBetween(Integer value1, Integer value2) {
            addCriterion("WorkTypes_id not between", value1, value2, "worktypesId");
            return this;
        }
    }
}